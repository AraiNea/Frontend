name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pizza
          POSTGRES_USER: pizzauser
          POSTGRES_PASSWORD: pizzapass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U pizzauser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_URL: jdbc:postgresql://postgres:5432/pizza
      DB_USERNAME: pizzauser
      DB_PASSWORD: pizzapass
      JWT_SECRET: mysupersecuresecretthatatleast32characterslong
      VITE_API_URL: http://localhost:8080

    steps:
      - uses: actions/checkout@v4

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag cxgdn/arainea-frontend:latest

      - name: Login to Docker Hub
        run: docker login -u cxgdn -p dckr_pat_NQDxIKYdnllF5XD5HRDypIEYy1U

      - name: Pull backend image
        run: docker pull docker.io/pattaratos/arainea-backend:latest

      # üëá Step ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° backend ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö network ‡∏Ç‡∏≠‡∏á postgres)
      - name: Run backend and connect to GitHub Actions service network
        run: |
          echo "üîç Searching for GitHub Actions network..."
          NET_ID=$(docker network ls --format '{{.Name}}' | grep github_ || true)

          if [ -z "$NET_ID" ]; then
            echo "‚ö†Ô∏è No GitHub Actions network found. Using default bridge network."
            NET_ID=bridge
          else
            echo "‚úÖ Found GitHub Actions network: $NET_ID"
          fi

          docker run -d --name be \
            --network=$NET_ID \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=${{ env.DB_URL }} \
            -e SPRING_DATASOURCE_USERNAME=${{ env.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ env.DB_PASSWORD }} \
            -e APP_JWT_SECRET=${{ env.JWT_SECRET }} \
            -e APP_JWT_EXPIRES_DAYS=30 \
            pattaratos/arainea-backend:latest

      # ‚úÖ ‡∏£‡∏≠ backend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ /actuator/health ‡∏´‡∏£‡∏∑‡∏≠ /home)
      - name: Wait for backend to be ready
        run: |
          echo "‚è≥ Waiting for backend to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health >/dev/null; then
              echo "‚úÖ Backend is ready!"
              exit 0
            fi
            echo "‚åõ Waiting ($i/30)..."
            sleep 5
          done
          echo "‚ùå Backend did not start in time"
          docker logs be
          exit 1

      # ‚úÖ ‡∏£‡∏±‡∏ô frontend container
      - name: Run frontend
        run: |
          echo "üîç Using same network as backend ($NET_ID)"
          docker run -d --name frontend \
            --network=$NET_ID \
            -p 3000:3000 \
            -e VITE_API_URL=${{ env.VITE_API_URL }} \
            cxgdn/arainea-frontend:latest

      # ‡πÅ‡∏™‡∏î‡∏á log backend ‡∏ñ‡πâ‡∏≤ fail
      - name: Show backend logs
        if: failure()
        run: docker logs be

      # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Cypress
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # ‚úÖ Run Cypress tests
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          wait-on: "http://localhost:3000"
          wait-on-timeout: 180
        env:
          VITE_API_URL: http://localhost:8080

      # Push image (optional)
      - name: Push Docker image
        run: docker push cxgdn/arainea-frontend:latest
